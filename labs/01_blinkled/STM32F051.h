#define REG_RCC_CR (volatile uint32_t*)(uintptr_t)0x40021000U // Clock Control Register
#define RCC_CR_HSION 0U //  HSI clock enable
#define RCC_CR_HSIRDY 1U //  HSI clock ready flag
#define RCC_CR_HSITRIM 3U //  HSI clock trimming
#define RCC_CR_HSICAL 8U //  HSI clock calibration
#define RCC_CR_HSEON 16U //  HSE clock enable
#define RCC_CR_HSERDY 17U //  HSE clock ready flag
#define RCC_CR_HSEBYP 18U //  HSE crystal oscillator bypass
#define RCC_CR_CSSON 19U //  Clock security system enable
#define RCC_CR_PLLON 24U //  PLL enable
#define RCC_CR_PLLRDY 25U //  PLL clock ready flag

#define REG_RCC_CFGR (volatile uint32_t*)(uintptr_t)0x40021004U // PLL Configuration Register
#define RCC_CFGR_SW 0U //     System clock switch
#define RCC_CFGR_SW_HSI 0b00U //      HSI selected as system clock
#define RCC_CFGR_SW_HSE 0b01U //      HSE selected as system clock
#define RCC_CFGR_SW_PLL 0b10U //      PLL selected as system clock
#define RCC_CFGR_SW_HSI48 0b11U //    HSI48 selected as system clock (when available)
#define RCC_CFGR_SWS 2U //     System clock switch status
#define RCC_CFGR_SWS_HSI 0b00U //      HSI oscillator used as system clock
#define RCC_CFGR_SWS_HSE 0b01U //      HSE oscillator used as system clock
#define RCC_CFGR_SWS_PLL 0b10U //      PLL used as system clock
#define RCC_CFGR_SWS_HSI48 0b11U //    HSI48 oscillator used as system clock (when available)
#define RCC_CFGR_HPRE 4U //         HCLK prescaler
#define RCC_CFGR_HPRE_2POW(VAL) VAL+7U //     SYSCLK divided by 2^VAL 0 <= VAL <= 9
#define RCC_CFGR_PPRE 8U //  PCLK   prescaler
#define RCC_CFGR_PPRE_2POW(VAL) VAL+3U //     HCLK divided by 2^VAL 0 <= VAL <= 4
#define RCC_CFGR_ADCPRE 14U //         ADC prescaler
#define RCC_CFGR_PLLSRC 15U //         PLL input clock source
#define RCC_CFGR_PLLSRC_HSI_2 0b00U //    HSI/2 selected as PLL input clock (PREDIV forced to divide by 2 on STM32F04x, STM32F07x and STM32F09x devices)
#define RCC_CFGR_PLLSRC_HSI 0b01U //      HSI/PREDIV selected as PLL input clock
#define RCC_CFGR_PLLSRC_HSE 0b10U //      HSE/PREDIV selected as PLL input clock
#define RCC_CFGR_PLLSRC_HSI48 0b11U //    HSI48/PREDIV selected as PLL input clock
#define RCC_CFGR_PLLXTPRE 17U //    HSE divider for PLL input clock
#define RCC_CFGR_PLLMUL 18U //     PLL multiplication factor
#define RCC_CFGR_PLLMUL_COEF(VAL) VAL-2U //  input clock xVAL 2 <= VAL <= 16
#define RCC_CFGR_MCO 24U //         Microcontroller clock output
#define RCC_CFGR_MCO_DISABLED 0b0000U //   No clock on MCO
#define RCC_CFGR_MCO_HSI14 0b0001U //      Internal RC 14 MHz oscillator clock selected
#define RCC_CFGR_MCO_LSI 0b0010U //        Internal low speed oscillator clock selected
#define RCC_CFGR_MCO_LSE 0b0011U //        External low speed oscillator clock selected
#define RCC_CFGR_MCO_SYSCLK 0b0100U //     System clock selected
#define RCC_CFGR_MCO_HSI 0b0101U //        Internal RC 8 MHz oscillator clock selected
#define RCC_CFGR_MCO_HSE 0b0110U //        External 4-32 MHz oscillator clock selected
#define RCC_CFGR_MCO_PLL 0b0111U //        PLL clock selected (divided by 1 or 2, depending on PLLNODIV)
#define RCC_CFGR_MCO_HSI48 0b1000U //      Internal RC 48 MHz oscillator clock selected

#define REG_RCC_AHBENR (volatile uint32_t*)(uintptr_t)0x40021014U // AHB1 Peripheral Clock Enable Register
#define RCC_AHBENR_DMAEN 0U //  clock enable
#define RCC_AHBENR_DMA2EN 1U //  DMA2 clock enable
#define RCC_AHBENR_SRAMEN 2U //  SRAM interface clock enable
#define RCC_AHBENR_FLITFEN 4U //  FLITF clock enable
#define RCC_AHBENR_CRCEN 6U //  CRC clock enable
#define RCC_AHBENR_IOPAEN 17U //  I/O port A clock enable
#define RCC_AHBENR_IOPBEN 18U //  I/O port B clock enable
#define RCC_AHBENR_IOPCEN 19U //  I/O port C clock enable
#define RCC_AHBENR_IOPDEN 20U //  I/O port D clock enable
#define RCC_AHBENR_IOPEEN 21U //  I/O port E clock enable
#define RCC_AHBENR_IOPFEN 22U //  I/O port F clock enable
#define RCC_AHBENR_TSCEN 24U //  Touch sensing controller clock enable

#define REG_RCC_CFGR2 (volatile uint32_t*)(uintptr_t)0x4002102cU // Clock configuration register 2
#define RCC_CFGR2_PREDIV 1U //         PREDIV division factor
#define RCC_CFGR2_PREDIV_COEF(VAL) VAL-1U //     PREDIV input clock divided by VAl 1 <= VAL <= 16

#define REG_GPIOx_MODER(X) (volatile uint32_t*)(uintptr_t)(0x48000000U + 0x400U * (X - 'A')) //     GPIO port mode register
#define GPIOx_MODER_INPUT_MODE 0b00U //           GPIO input mode
#define GPIOx_MODER_GPO_MODE 0b01U //             General purppose output mode
#define GPIOx_MODER_ALTERNATE_FUNC_MODE 0b10U //  Alternate function mode
#define GPIOx_MODER_ANALOG_MODE 0b11U //          GPIO analog mode

#define REG_GPIOx_OTYPER(X) (volatile uint32_t*)(uintptr_t)(0x48000004U + 0x400U * (X - 'A')) // GPIO port output type register
#define GPIOx_OTYPER_PP 0b0U //    Output push-pull (reset state)
#define GPIOx_OTYPER_OD 0b1U //    Output open-drain

#define REG_GPIOx_PUPDR(X) (volatile uint32_t*)(uintptr_t)(0x4800000cU + 0x400U * (X - 'A')) //     GPIO port pull-up/pull-down register
#define GPIOx_PUPDR_NO 0b00U //       No pull-up, pull-down
#define GPIOx_PUPDR_PU 0b01U //       Pull-up
#define GPIOx_PUPDR_PD 0b10U //       Pull-down
#define GPIOx_PUPDR_REVERSE 0b11U //  Reserved

#define REG_GPIOx_IDR(X) (volatile uint32_t*)(uintptr_t)(0x48000010U + 0x400U * (X - 'A')) // GPIO port input  data register

#define REG_GPIOx_ODR(X) (volatile uint32_t*)(uintptr_t)(0x48000014U + 0x400U * (X - 'A')) // GPIO port output data register

#define REG_GPIOA_MODER (volatile uint32_t*)(uintptr_t)0x48000000U //     GPIO port mode register
#define GPIOA_MODER_INPUT_MODE 0b00U //           GPIO input mode
#define GPIOA_MODER_GPO_MODE 0b01U //             General purppose output mode
#define GPIOA_MODER_ALTERNATE_FUNC_MODE 0b10U //  Alternate function mode
#define GPIOA_MODER_ANALOG_MODE 0b11U //          GPIO analog mode

#define REG_GPIOB_MODER (volatile uint32_t*)(uintptr_t)0x48000400U //     GPIO port mode register
#define GPIOB_MODER_INPUT_MODE 0b00U //           GPIO input mode
#define GPIOB_MODER_GPO_MODE 0b01U //             General purppose output mode
#define GPIOB_MODER_ALTERNATE_FUNC_MODE 0b10U //  Alternate function mode
#define GPIOB_MODER_ANALOG_MODE 0b11U //          GPIO analog mode

#define REG_GPIOC_MODER (volatile uint32_t*)(uintptr_t)0x48000800U //     GPIO port mode register
#define GPIOC_MODER_INPUT_MODE 0b00U //           GPIO input mode
#define GPIOC_MODER_GPO_MODE 0b01U //             General purppose output mode
#define GPIOC_MODER_ALTERNATE_FUNC_MODE 0b10U //  Alternate function mode
#define GPIOC_MODER_ANALOG_MODE 0b11U //          GPIO analog mode

#define REG_GPIOD_MODER (volatile uint32_t*)(uintptr_t)0x48000c00U //     GPIO port mode register
#define GPIOD_MODER_INPUT_MODE 0b00U //           GPIO input mode
#define GPIOD_MODER_GPO_MODE 0b01U //             General purppose output mode
#define GPIOD_MODER_ALTERNATE_FUNC_MODE 0b10U //  Alternate function mode
#define GPIOD_MODER_ANALOG_MODE 0b11U //          GPIO analog mode

#define REG_GPIOE_MODER (volatile uint32_t*)(uintptr_t)0x48001000U //     GPIO port mode register
#define GPIOE_MODER_INPUT_MODE 0b00U //           GPIO input mode
#define GPIOE_MODER_GPO_MODE 0b01U //             General purppose output mode
#define GPIOE_MODER_ALTERNATE_FUNC_MODE 0b10U //  Alternate function mode
#define GPIOE_MODER_ANALOG_MODE 0b11U //          GPIO analog mode

#define REG_GPIOF_MODER (volatile uint32_t*)(uintptr_t)0x48001400U //     GPIO port mode register
#define GPIOF_MODER_INPUT_MODE 0b00U //           GPIO input mode
#define GPIOF_MODER_GPO_MODE 0b01U //             General purppose output mode
#define GPIOF_MODER_ALTERNATE_FUNC_MODE 0b10U //  Alternate function mode
#define GPIOF_MODER_ANALOG_MODE 0b11U //          GPIO analog mode

#define REG_GPIOA_OTYPER (volatile uint32_t*)(uintptr_t)0x48000004U // GPIO port output type register
#define GPIOA_OTYPER_PP 0b0U //    Output push-pull (reset state)
#define GPIOA_OTYPER_OD 0b1U //    Output open-drain

#define REG_GPIOB_OTYPER (volatile uint32_t*)(uintptr_t)0x48000404U // GPIO port output type register
#define GPIOB_OTYPER_PP 0b0U //    Output push-pull (reset state)
#define GPIOB_OTYPER_OD 0b1U //    Output open-drain

#define REG_GPIOC_OTYPER (volatile uint32_t*)(uintptr_t)0x48000804U // GPIO port output type register
#define GPIOC_OTYPER_PP 0b0U //    Output push-pull (reset state)
#define GPIOC_OTYPER_OD 0b1U //    Output open-drain

#define REG_GPIOD_OTYPER (volatile uint32_t*)(uintptr_t)0x48000c04U // GPIO port output type register
#define GPIOD_OTYPER_PP 0b0U //    Output push-pull (reset state)
#define GPIOD_OTYPER_OD 0b1U //    Output open-drain

#define REG_GPIOE_OTYPER (volatile uint32_t*)(uintptr_t)0x48001004U // GPIO port output type register
#define GPIOE_OTYPER_PP 0b0U //    Output push-pull (reset state)
#define GPIOE_OTYPER_OD 0b1U //    Output open-drain

#define REG_GPIOF_OTYPER (volatile uint32_t*)(uintptr_t)0x48001404U // GPIO port output type register
#define GPIOF_OTYPER_PP 0b0U //    Output push-pull (reset state)
#define GPIOF_OTYPER_OD 0b1U //    Output open-drain

#define REG_GPIOA_PUPDR (volatile uint32_t*)(uintptr_t)0x4800000cU //     GPIO port pull-up/pull-down register
#define GPIOA_PUPDR_NO 0b00U //       No pull-up, pull-down
#define GPIOA_PUPDR_PU 0b01U //       Pull-up
#define GPIOA_PUPDR_PD 0b10U //       Pull-down
#define GPIOA_PUPDR_REVERSE 0b11U //  Reserved

#define REG_GPIOB_PUPDR (volatile uint32_t*)(uintptr_t)0x4800040cU //     GPIO port pull-up/pull-down register
#define GPIOB_PUPDR_NO 0b00U //       No pull-up, pull-down
#define GPIOB_PUPDR_PU 0b01U //       Pull-up
#define GPIOB_PUPDR_PD 0b10U //       Pull-down
#define GPIOB_PUPDR_REVERSE 0b11U //  Reserved

#define REG_GPIOC_PUPDR (volatile uint32_t*)(uintptr_t)0x4800080cU //     GPIO port pull-up/pull-down register
#define GPIOC_PUPDR_NO 0b00U //       No pull-up, pull-down
#define GPIOC_PUPDR_PU 0b01U //       Pull-up
#define GPIOC_PUPDR_PD 0b10U //       Pull-down
#define GPIOC_PUPDR_REVERSE 0b11U //  Reserved

#define REG_GPIOD_PUPDR (volatile uint32_t*)(uintptr_t)0x48000c0cU //     GPIO port pull-up/pull-down register
#define GPIOD_PUPDR_NO 0b00U //       No pull-up, pull-down
#define GPIOD_PUPDR_PU 0b01U //       Pull-up
#define GPIOD_PUPDR_PD 0b10U //       Pull-down
#define GPIOD_PUPDR_REVERSE 0b11U //  Reserved

#define REG_GPIOE_PUPDR (volatile uint32_t*)(uintptr_t)0x4800100cU //     GPIO port pull-up/pull-down register
#define GPIOE_PUPDR_NO 0b00U //       No pull-up, pull-down
#define GPIOE_PUPDR_PU 0b01U //       Pull-up
#define GPIOE_PUPDR_PD 0b10U //       Pull-down
#define GPIOE_PUPDR_REVERSE 0b11U //  Reserved

#define REG_GPIOF_PUPDR (volatile uint32_t*)(uintptr_t)0x4800140cU //     GPIO port pull-up/pull-down register
#define GPIOF_PUPDR_NO 0b00U //       No pull-up, pull-down
#define GPIOF_PUPDR_PU 0b01U //       Pull-up
#define GPIOF_PUPDR_PD 0b10U //       Pull-down
#define GPIOF_PUPDR_REVERSE 0b11U //  Reserved

#define REG_GPIOA_IDR (volatile uint32_t*)(uintptr_t)0x48000010U // GPIO port input  data register

#define REG_GPIOB_IDR (volatile uint32_t*)(uintptr_t)0x48000410U // GPIO port input  data register

#define REG_GPIOC_IDR (volatile uint32_t*)(uintptr_t)0x48000810U // GPIO port input  data register

#define REG_GPIOD_IDR (volatile uint32_t*)(uintptr_t)0x48000c10U // GPIO port input  data register

#define REG_GPIOE_IDR (volatile uint32_t*)(uintptr_t)0x48001010U // GPIO port input  data register

#define REG_GPIOF_IDR (volatile uint32_t*)(uintptr_t)0x48001410U // GPIO port input  data register

#define REG_GPIOA_ODR (volatile uint32_t*)(uintptr_t)0x48000014U // GPIO port output data register

#define REG_GPIOB_ODR (volatile uint32_t*)(uintptr_t)0x48000414U // GPIO port output data register

#define REG_GPIOC_ODR (volatile uint32_t*)(uintptr_t)0x48000814U // GPIO port output data register

#define REG_GPIOD_ODR (volatile uint32_t*)(uintptr_t)0x48000c14U // GPIO port output data register

#define REG_GPIOE_ODR (volatile uint32_t*)(uintptr_t)0x48001014U // GPIO port output data register

#define REG_GPIOF_ODR (volatile uint32_t*)(uintptr_t)0x48001414U // GPIO port output data register


/////////////////////////////////////////////////////////////////////////////////////////////////////

#define SET_BITS(REG, SBIT, VAL)         *(REG) |= (VAL) << (SBIT)
#define RESET_BITS(REG, SBIT, MASK, VAL) *(REG) = ((*(REG) & ~((MASK) << (SBIT))) | ((VAL) << (SBIT)))
#define READ_BITS(REG, SBIT, MASK)       ((*(REG) >> (SBIT)) & (MASK))

#define SET_BIT(REG, BIT)        *(REG) |= 1U << (BIT)
#define CLEAR_BIT(REG, BIT)      *(REG) &= ~(1U << (BIT))
#define RESET_BIT(REG, BIT, VAL) RESET_BITS(REG, BIT, 0b1U, VAL)
#define READ_BIT(REG, BIT)       READ_BITS(REG, BIT, 0b1U)

/////////////////////////////////////////////////////////////////////////////////////////////////////

#define SET_RCC_CR_BIT(BIT) SET_BIT(REG_RCC_CR, BIT)
#define CLEAR_RCC_CR_BIT(BIT) CLEAR_BIT(REG_RCC_CR, BIT)
#define RESET_RCC_CR_BIT(BIT, VAL) RESET_BIT(REG_RCC_CR, BIT, VAL)
#define READ_RCC_CR_BIT(BIT) READ_BIT(REG_RCC_CR, BIT)

#define SET_RCC_CR_HSION() SET_BIT(REG_RCC_CR, RCC_CR_HSION)
#define CLEAR_RCC_CR_HSION() CLEAR_BIT(REG_RCC_CR, RCC_CR_HSION)
#define RESET_RCC_CR_HSION(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_HSION, 0b1U, VAL)
#define READ_RCC_CR_HSION() READ_BIT(REG_RCC_CR, RCC_CR_HSION)


#define SET_RCC_CR_HSIRDY() SET_BIT(REG_RCC_CR, RCC_CR_HSIRDY)
#define CLEAR_RCC_CR_HSIRDY() CLEAR_BIT(REG_RCC_CR, RCC_CR_HSIRDY)
#define RESET_RCC_CR_HSIRDY(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_HSIRDY, 0b1U, VAL)
#define READ_RCC_CR_HSIRDY() READ_BIT(REG_RCC_CR, RCC_CR_HSIRDY)


#define SET_RCC_CR_HSITRIM(VAL) SET_BITS(REG_RCC_CR, RCC_CR_HSITRIM, VAL)
#define RESET_RCC_CR_HSITRIM(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_HSITRIM, 0b11111U, VAL)
#define READ_RCC_CR_HSITRIM() READ_BITS(REG_RCC_CR, RCC_CR_HSITRIM, 0b11111U)


#define SET_RCC_CR_HSICAL(VAL) SET_BITS(REG_RCC_CR, RCC_CR_HSICAL, VAL)
#define RESET_RCC_CR_HSICAL(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_HSICAL, 0b11111111U, VAL)
#define READ_RCC_CR_HSICAL() READ_BITS(REG_RCC_CR, RCC_CR_HSICAL, 0b11111111U)


#define SET_RCC_CR_HSEON() SET_BIT(REG_RCC_CR, RCC_CR_HSEON)
#define CLEAR_RCC_CR_HSEON() CLEAR_BIT(REG_RCC_CR, RCC_CR_HSEON)
#define RESET_RCC_CR_HSEON(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_HSEON, 0b1U, VAL)
#define READ_RCC_CR_HSEON() READ_BIT(REG_RCC_CR, RCC_CR_HSEON)


#define SET_RCC_CR_HSERDY() SET_BIT(REG_RCC_CR, RCC_CR_HSERDY)
#define CLEAR_RCC_CR_HSERDY() CLEAR_BIT(REG_RCC_CR, RCC_CR_HSERDY)
#define RESET_RCC_CR_HSERDY(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_HSERDY, 0b1U, VAL)
#define READ_RCC_CR_HSERDY() READ_BIT(REG_RCC_CR, RCC_CR_HSERDY)


#define SET_RCC_CR_HSEBYP() SET_BIT(REG_RCC_CR, RCC_CR_HSEBYP)
#define CLEAR_RCC_CR_HSEBYP() CLEAR_BIT(REG_RCC_CR, RCC_CR_HSEBYP)
#define RESET_RCC_CR_HSEBYP(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_HSEBYP, 0b1U, VAL)
#define READ_RCC_CR_HSEBYP() READ_BIT(REG_RCC_CR, RCC_CR_HSEBYP)


#define SET_RCC_CR_CSSON() SET_BIT(REG_RCC_CR, RCC_CR_CSSON)
#define CLEAR_RCC_CR_CSSON() CLEAR_BIT(REG_RCC_CR, RCC_CR_CSSON)
#define RESET_RCC_CR_CSSON(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_CSSON, 0b1U, VAL)
#define READ_RCC_CR_CSSON() READ_BIT(REG_RCC_CR, RCC_CR_CSSON)


#define SET_RCC_CR_PLLON() SET_BIT(REG_RCC_CR, RCC_CR_PLLON)
#define CLEAR_RCC_CR_PLLON() CLEAR_BIT(REG_RCC_CR, RCC_CR_PLLON)
#define RESET_RCC_CR_PLLON(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_PLLON, 0b1U, VAL)
#define READ_RCC_CR_PLLON() READ_BIT(REG_RCC_CR, RCC_CR_PLLON)


#define SET_RCC_CR_PLLRDY() SET_BIT(REG_RCC_CR, RCC_CR_PLLRDY)
#define CLEAR_RCC_CR_PLLRDY() CLEAR_BIT(REG_RCC_CR, RCC_CR_PLLRDY)
#define RESET_RCC_CR_PLLRDY(VAL) RESET_BITS(REG_RCC_CR, RCC_CR_PLLRDY, 0b1U, VAL)
#define READ_RCC_CR_PLLRDY() READ_BIT(REG_RCC_CR, RCC_CR_PLLRDY)



#define SET_RCC_CFGR_BIT(BIT) SET_BIT(REG_RCC_CFGR, BIT)
#define CLEAR_RCC_CFGR_BIT(BIT) CLEAR_BIT(REG_RCC_CFGR, BIT)
#define RESET_RCC_CFGR_BIT(BIT, VAL) RESET_BIT(REG_RCC_CFGR, BIT, VAL)
#define READ_RCC_CFGR_BIT(BIT) READ_BIT(REG_RCC_CFGR, BIT)

#define SET_RCC_CFGR_SW(VAL) SET_BITS(REG_RCC_CFGR, RCC_CFGR_SW, VAL)
#define RESET_RCC_CFGR_SW(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SW, 0b11U, VAL)
#define READ_RCC_CFGR_SW() READ_BITS(REG_RCC_CFGR, RCC_CFGR_SW, 0b11U)

#define SET_RCC_CFGR_SW_HSI() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SW, 0b11U, RCC_CFGR_SW_HSI)
#define SET_RCC_CFGR_SW_HSE() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SW, 0b11U, RCC_CFGR_SW_HSE)
#define SET_RCC_CFGR_SW_PLL() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SW, 0b11U, RCC_CFGR_SW_PLL)
#define SET_RCC_CFGR_SW_HSI48() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SW, 0b11U, RCC_CFGR_SW_HSI48)

#define SET_RCC_CFGR_SWS(VAL) SET_BITS(REG_RCC_CFGR, RCC_CFGR_SWS, VAL)
#define RESET_RCC_CFGR_SWS(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SWS, 0b11U, VAL)
#define READ_RCC_CFGR_SWS() READ_BITS(REG_RCC_CFGR, RCC_CFGR_SWS, 0b11U)

#define SET_RCC_CFGR_SWS_HSI() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SWS, 0b11U, RCC_CFGR_SWS_HSI)
#define SET_RCC_CFGR_SWS_HSE() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SWS, 0b11U, RCC_CFGR_SWS_HSE)
#define SET_RCC_CFGR_SWS_PLL() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SWS, 0b11U, RCC_CFGR_SWS_PLL)
#define SET_RCC_CFGR_SWS_HSI48() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_SWS, 0b11U, RCC_CFGR_SWS_HSI48)

#define SET_RCC_CFGR_HPRE(VAL) SET_BITS(REG_RCC_CFGR, RCC_CFGR_HPRE, VAL)
#define RESET_RCC_CFGR_HPRE(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_HPRE, 0b1111U, VAL)
#define READ_RCC_CFGR_HPRE() READ_BITS(REG_RCC_CFGR, RCC_CFGR_HPRE, 0b1111U)

#define SET_RCC_CFGR_HPRE_2POW(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_HPRE, 0b1111U, RCC_CFGR_HPRE_2POW(VAL))

#define SET_RCC_CFGR_PPRE(VAL) SET_BITS(REG_RCC_CFGR, RCC_CFGR_PPRE, VAL)
#define RESET_RCC_CFGR_PPRE(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PPRE, 0b111U, VAL)
#define READ_RCC_CFGR_PPRE() READ_BITS(REG_RCC_CFGR, RCC_CFGR_PPRE, 0b111U)

#define SET_RCC_CFGR_PPRE_2POW(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PPRE, 0b111U, RCC_CFGR_PPRE_2POW(VAL))

#define SET_RCC_CFGR_ADCPRE() SET_BIT(REG_RCC_CFGR, RCC_CFGR_ADCPRE)
#define CLEAR_RCC_CFGR_ADCPRE() CLEAR_BIT(REG_RCC_CFGR, RCC_CFGR_ADCPRE)
#define RESET_RCC_CFGR_ADCPRE(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_ADCPRE, 0b1U, VAL)
#define READ_RCC_CFGR_ADCPRE() READ_BIT(REG_RCC_CFGR, RCC_CFGR_ADCPRE)


#define SET_RCC_CFGR_PLLSRC(VAL) SET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLSRC, VAL)
#define RESET_RCC_CFGR_PLLSRC(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLSRC, 0b11U, VAL)
#define READ_RCC_CFGR_PLLSRC() READ_BITS(REG_RCC_CFGR, RCC_CFGR_PLLSRC, 0b11U)

#define SET_RCC_CFGR_PLLSRC_HSI_2() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLSRC, 0b11U, RCC_CFGR_PLLSRC_HSI_2)
#define SET_RCC_CFGR_PLLSRC_HSI() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLSRC, 0b11U, RCC_CFGR_PLLSRC_HSI)
#define SET_RCC_CFGR_PLLSRC_HSE() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLSRC, 0b11U, RCC_CFGR_PLLSRC_HSE)
#define SET_RCC_CFGR_PLLSRC_HSI48() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLSRC, 0b11U, RCC_CFGR_PLLSRC_HSI48)

#define SET_RCC_CFGR_PLLXTPRE() SET_BIT(REG_RCC_CFGR, RCC_CFGR_PLLXTPRE)
#define CLEAR_RCC_CFGR_PLLXTPRE() CLEAR_BIT(REG_RCC_CFGR, RCC_CFGR_PLLXTPRE)
#define RESET_RCC_CFGR_PLLXTPRE(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLXTPRE, 0b1U, VAL)
#define READ_RCC_CFGR_PLLXTPRE() READ_BIT(REG_RCC_CFGR, RCC_CFGR_PLLXTPRE)


#define SET_RCC_CFGR_PLLMUL(VAL) SET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLMUL, VAL)
#define RESET_RCC_CFGR_PLLMUL(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLMUL, 0b1111U, VAL)
#define READ_RCC_CFGR_PLLMUL() READ_BITS(REG_RCC_CFGR, RCC_CFGR_PLLMUL, 0b1111U)

#define SET_RCC_CFGR_PLLMUL_COEF(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_PLLMUL, 0b1111U, RCC_CFGR_PLLMUL_COEF(VAL))

#define SET_RCC_CFGR_MCO(VAL) SET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, VAL)
#define RESET_RCC_CFGR_MCO(VAL) RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, VAL)
#define READ_RCC_CFGR_MCO() READ_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U)

#define SET_RCC_CFGR_MCO_DISABLED() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, RCC_CFGR_MCO_DISABLED)
#define SET_RCC_CFGR_MCO_HSI14() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, RCC_CFGR_MCO_HSI14)
#define SET_RCC_CFGR_MCO_LSI() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, RCC_CFGR_MCO_LSI)
#define SET_RCC_CFGR_MCO_LSE() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, RCC_CFGR_MCO_LSE)
#define SET_RCC_CFGR_MCO_SYSCLK() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, RCC_CFGR_MCO_SYSCLK)
#define SET_RCC_CFGR_MCO_HSI() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, RCC_CFGR_MCO_HSI)
#define SET_RCC_CFGR_MCO_HSE() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, RCC_CFGR_MCO_HSE)
#define SET_RCC_CFGR_MCO_PLL() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, RCC_CFGR_MCO_PLL)
#define SET_RCC_CFGR_MCO_HSI48() RESET_BITS(REG_RCC_CFGR, RCC_CFGR_MCO, 0b1111U, RCC_CFGR_MCO_HSI48)


#define SET_RCC_AHBENR_BIT(BIT) SET_BIT(REG_RCC_AHBENR, BIT)
#define CLEAR_RCC_AHBENR_BIT(BIT) CLEAR_BIT(REG_RCC_AHBENR, BIT)
#define RESET_RCC_AHBENR_BIT(BIT, VAL) RESET_BIT(REG_RCC_AHBENR, BIT, VAL)
#define READ_RCC_AHBENR_BIT(BIT) READ_BIT(REG_RCC_AHBENR, BIT)

#define SET_RCC_AHBENR_DMAEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_DMAEN)
#define CLEAR_RCC_AHBENR_DMAEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_DMAEN)
#define RESET_RCC_AHBENR_DMAEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_DMAEN, 0b1U, VAL)
#define READ_RCC_AHBENR_DMAEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_DMAEN)


#define SET_RCC_AHBENR_DMA2EN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_DMA2EN)
#define CLEAR_RCC_AHBENR_DMA2EN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_DMA2EN)
#define RESET_RCC_AHBENR_DMA2EN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_DMA2EN, 0b1U, VAL)
#define READ_RCC_AHBENR_DMA2EN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_DMA2EN)


#define SET_RCC_AHBENR_SRAMEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_SRAMEN)
#define CLEAR_RCC_AHBENR_SRAMEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_SRAMEN)
#define RESET_RCC_AHBENR_SRAMEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_SRAMEN, 0b1U, VAL)
#define READ_RCC_AHBENR_SRAMEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_SRAMEN)


#define SET_RCC_AHBENR_FLITFEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_FLITFEN)
#define CLEAR_RCC_AHBENR_FLITFEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_FLITFEN)
#define RESET_RCC_AHBENR_FLITFEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_FLITFEN, 0b1U, VAL)
#define READ_RCC_AHBENR_FLITFEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_FLITFEN)


#define SET_RCC_AHBENR_CRCEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_CRCEN)
#define CLEAR_RCC_AHBENR_CRCEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_CRCEN)
#define RESET_RCC_AHBENR_CRCEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_CRCEN, 0b1U, VAL)
#define READ_RCC_AHBENR_CRCEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_CRCEN)


#define SET_RCC_AHBENR_IOPAEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPAEN)
#define CLEAR_RCC_AHBENR_IOPAEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPAEN)
#define RESET_RCC_AHBENR_IOPAEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_IOPAEN, 0b1U, VAL)
#define READ_RCC_AHBENR_IOPAEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPAEN)


#define SET_RCC_AHBENR_IOPBEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPBEN)
#define CLEAR_RCC_AHBENR_IOPBEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPBEN)
#define RESET_RCC_AHBENR_IOPBEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_IOPBEN, 0b1U, VAL)
#define READ_RCC_AHBENR_IOPBEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPBEN)


#define SET_RCC_AHBENR_IOPCEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPCEN)
#define CLEAR_RCC_AHBENR_IOPCEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPCEN)
#define RESET_RCC_AHBENR_IOPCEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_IOPCEN, 0b1U, VAL)
#define READ_RCC_AHBENR_IOPCEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPCEN)


#define SET_RCC_AHBENR_IOPDEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPDEN)
#define CLEAR_RCC_AHBENR_IOPDEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPDEN)
#define RESET_RCC_AHBENR_IOPDEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_IOPDEN, 0b1U, VAL)
#define READ_RCC_AHBENR_IOPDEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPDEN)


#define SET_RCC_AHBENR_IOPEEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPEEN)
#define CLEAR_RCC_AHBENR_IOPEEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPEEN)
#define RESET_RCC_AHBENR_IOPEEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_IOPEEN, 0b1U, VAL)
#define READ_RCC_AHBENR_IOPEEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPEEN)


#define SET_RCC_AHBENR_IOPFEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPFEN)
#define CLEAR_RCC_AHBENR_IOPFEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPFEN)
#define RESET_RCC_AHBENR_IOPFEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_IOPFEN, 0b1U, VAL)
#define READ_RCC_AHBENR_IOPFEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_IOPFEN)


#define SET_RCC_AHBENR_TSCEN() SET_BIT(REG_RCC_AHBENR, RCC_AHBENR_TSCEN)
#define CLEAR_RCC_AHBENR_TSCEN() CLEAR_BIT(REG_RCC_AHBENR, RCC_AHBENR_TSCEN)
#define RESET_RCC_AHBENR_TSCEN(VAL) RESET_BITS(REG_RCC_AHBENR, RCC_AHBENR_TSCEN, 0b1U, VAL)
#define READ_RCC_AHBENR_TSCEN() READ_BIT(REG_RCC_AHBENR, RCC_AHBENR_TSCEN)



#define SET_RCC_CFGR2_BIT(BIT) SET_BIT(REG_RCC_CFGR2, BIT)
#define CLEAR_RCC_CFGR2_BIT(BIT) CLEAR_BIT(REG_RCC_CFGR2, BIT)
#define RESET_RCC_CFGR2_BIT(BIT, VAL) RESET_BIT(REG_RCC_CFGR2, BIT, VAL)
#define READ_RCC_CFGR2_BIT(BIT) READ_BIT(REG_RCC_CFGR2, BIT)

#define SET_RCC_CFGR2_PREDIV(VAL) SET_BITS(REG_RCC_CFGR2, RCC_CFGR2_PREDIV, VAL)
#define RESET_RCC_CFGR2_PREDIV(VAL) RESET_BITS(REG_RCC_CFGR2, RCC_CFGR2_PREDIV, 0b1111U, VAL)
#define READ_RCC_CFGR2_PREDIV() READ_BITS(REG_RCC_CFGR2, RCC_CFGR2_PREDIV, 0b1111U)

#define SET_RCC_CFGR2_PREDIV_COEF(VAL) RESET_BITS(REG_RCC_CFGR2, RCC_CFGR2_PREDIV, 0b1111U, RCC_CFGR2_PREDIV_COEF(VAL))


#define SET_GPIOx_MODER_BITS(X, BIT, VAL) SET_BITS(REG_GPIOx_MODER(X), 2U*BIT, VAL)
#define RESET_GPIOx_MODER_BITS(X, BIT, VAL) RESET_BITS(REG_GPIOx_MODER(X), 2U*BIT, 0b11U, VAL)
#define READ_GPIOx_MODER_BITS(X, BIT) READ_BITS(REG_GPIOx_MODER(X), 2U*BIT, 0b11U)
#define SET_GPIOx_MODER_INPUT_MODE(X, BIT) RESET_BITS(REG_GPIOx_MODER(X), 2U*BIT, 0b11U, GPIOx_MODER_INPUT_MODE)
#define SET_GPIOx_MODER_GPO_MODE(X, BIT) RESET_BITS(REG_GPIOx_MODER(X), 2U*BIT, 0b11U, GPIOx_MODER_GPO_MODE)
#define SET_GPIOx_MODER_ALTERNATE_FUNC_MODE(X, BIT) RESET_BITS(REG_GPIOx_MODER(X), 2U*BIT, 0b11U, GPIOx_MODER_ALTERNATE_FUNC_MODE)
#define SET_GPIOx_MODER_ANALOG_MODE(X, BIT) RESET_BITS(REG_GPIOx_MODER(X), 2U*BIT, 0b11U, GPIOx_MODER_ANALOG_MODE)


#define SET_GPIOx_OTYPER_BIT(X, BIT) SET_BIT(REG_GPIOx_OTYPER(X), BIT)
#define CLEAR_GPIOx_OTYPER_BIT(X, BIT) CLEAR_BIT(REG_GPIOx_OTYPER(X), BIT)
#define RESET_GPIOx_OTYPER_BIT(X, BIT, VAL) RESET_BIT(REG_GPIOx_OTYPER(X), BIT, VAL)
#define READ_GPIOx_OTYPER_BIT(X, BIT) READ_BIT(REG_GPIOx_OTYPER(X), BIT)
#define SET_GPIOx_OTYPER_PP(X, BIT) RESET_BITS(REG_GPIOx_OTYPER(X), 1U*BIT, 0b1U, GPIOx_OTYPER_PP)
#define SET_GPIOx_OTYPER_OD(X, BIT) RESET_BITS(REG_GPIOx_OTYPER(X), 1U*BIT, 0b1U, GPIOx_OTYPER_OD)


#define SET_GPIOx_PUPDR_BITS(X, BIT, VAL) SET_BITS(REG_GPIOx_PUPDR(X), 2U*BIT, VAL)
#define RESET_GPIOx_PUPDR_BITS(X, BIT, VAL) RESET_BITS(REG_GPIOx_PUPDR(X), 2U*BIT, 0b11U, VAL)
#define READ_GPIOx_PUPDR_BITS(X, BIT) READ_BITS(REG_GPIOx_PUPDR(X), 2U*BIT, 0b11U)
#define SET_GPIOx_PUPDR_NO(X, BIT) RESET_BITS(REG_GPIOx_PUPDR(X), 2U*BIT, 0b11U, GPIOx_PUPDR_NO)
#define SET_GPIOx_PUPDR_PU(X, BIT) RESET_BITS(REG_GPIOx_PUPDR(X), 2U*BIT, 0b11U, GPIOx_PUPDR_PU)
#define SET_GPIOx_PUPDR_PD(X, BIT) RESET_BITS(REG_GPIOx_PUPDR(X), 2U*BIT, 0b11U, GPIOx_PUPDR_PD)
#define SET_GPIOx_PUPDR_REVERSE(X, BIT) RESET_BITS(REG_GPIOx_PUPDR(X), 2U*BIT, 0b11U, GPIOx_PUPDR_REVERSE)


#define SET_GPIOx_IDR_BIT(X, BIT) SET_BIT(REG_GPIOx_IDR(X), BIT)
#define CLEAR_GPIOx_IDR_BIT(X, BIT) CLEAR_BIT(REG_GPIOx_IDR(X), BIT)
#define RESET_GPIOx_IDR_BIT(X, BIT, VAL) RESET_BIT(REG_GPIOx_IDR(X), BIT, VAL)
#define READ_GPIOx_IDR_BIT(X, BIT) READ_BIT(REG_GPIOx_IDR(X), BIT)


#define SET_GPIOx_ODR_BIT(X, BIT) SET_BIT(REG_GPIOx_ODR(X), BIT)
#define CLEAR_GPIOx_ODR_BIT(X, BIT) CLEAR_BIT(REG_GPIOx_ODR(X), BIT)
#define RESET_GPIOx_ODR_BIT(X, BIT, VAL) RESET_BIT(REG_GPIOx_ODR(X), BIT, VAL)
#define READ_GPIOx_ODR_BIT(X, BIT) READ_BIT(REG_GPIOx_ODR(X), BIT)


#define SET_GPIOA_MODER_BITS(BIT, VAL) SET_BITS(REG_GPIOA_MODER, 2U*BIT, VAL)
#define RESET_GPIOA_MODER_BITS(BIT, VAL) RESET_BITS(REG_GPIOA_MODER, 2U*BIT, 0b11U, VAL)
#define READ_GPIOA_MODER_BITS(BIT) READ_BITS(REG_GPIOA_MODER, 2U*BIT, 0b11U)
#define SET_GPIOA_MODER_INPUT_MODE(BIT) RESET_BITS(REG_GPIOA_MODER, 2U*BIT, 0b11U, GPIOA_MODER_INPUT_MODE)
#define SET_GPIOA_MODER_GPO_MODE(BIT) RESET_BITS(REG_GPIOA_MODER, 2U*BIT, 0b11U, GPIOA_MODER_GPO_MODE)
#define SET_GPIOA_MODER_ALTERNATE_FUNC_MODE(BIT) RESET_BITS(REG_GPIOA_MODER, 2U*BIT, 0b11U, GPIOA_MODER_ALTERNATE_FUNC_MODE)
#define SET_GPIOA_MODER_ANALOG_MODE(BIT) RESET_BITS(REG_GPIOA_MODER, 2U*BIT, 0b11U, GPIOA_MODER_ANALOG_MODE)


#define SET_GPIOB_MODER_BITS(BIT, VAL) SET_BITS(REG_GPIOB_MODER, 2U*BIT, VAL)
#define RESET_GPIOB_MODER_BITS(BIT, VAL) RESET_BITS(REG_GPIOB_MODER, 2U*BIT, 0b11U, VAL)
#define READ_GPIOB_MODER_BITS(BIT) READ_BITS(REG_GPIOB_MODER, 2U*BIT, 0b11U)
#define SET_GPIOB_MODER_INPUT_MODE(BIT) RESET_BITS(REG_GPIOB_MODER, 2U*BIT, 0b11U, GPIOB_MODER_INPUT_MODE)
#define SET_GPIOB_MODER_GPO_MODE(BIT) RESET_BITS(REG_GPIOB_MODER, 2U*BIT, 0b11U, GPIOB_MODER_GPO_MODE)
#define SET_GPIOB_MODER_ALTERNATE_FUNC_MODE(BIT) RESET_BITS(REG_GPIOB_MODER, 2U*BIT, 0b11U, GPIOB_MODER_ALTERNATE_FUNC_MODE)
#define SET_GPIOB_MODER_ANALOG_MODE(BIT) RESET_BITS(REG_GPIOB_MODER, 2U*BIT, 0b11U, GPIOB_MODER_ANALOG_MODE)


#define SET_GPIOC_MODER_BITS(BIT, VAL) SET_BITS(REG_GPIOC_MODER, 2U*BIT, VAL)
#define RESET_GPIOC_MODER_BITS(BIT, VAL) RESET_BITS(REG_GPIOC_MODER, 2U*BIT, 0b11U, VAL)
#define READ_GPIOC_MODER_BITS(BIT) READ_BITS(REG_GPIOC_MODER, 2U*BIT, 0b11U)
#define SET_GPIOC_MODER_INPUT_MODE(BIT) RESET_BITS(REG_GPIOC_MODER, 2U*BIT, 0b11U, GPIOC_MODER_INPUT_MODE)
#define SET_GPIOC_MODER_GPO_MODE(BIT) RESET_BITS(REG_GPIOC_MODER, 2U*BIT, 0b11U, GPIOC_MODER_GPO_MODE)
#define SET_GPIOC_MODER_ALTERNATE_FUNC_MODE(BIT) RESET_BITS(REG_GPIOC_MODER, 2U*BIT, 0b11U, GPIOC_MODER_ALTERNATE_FUNC_MODE)
#define SET_GPIOC_MODER_ANALOG_MODE(BIT) RESET_BITS(REG_GPIOC_MODER, 2U*BIT, 0b11U, GPIOC_MODER_ANALOG_MODE)


#define SET_GPIOD_MODER_BITS(BIT, VAL) SET_BITS(REG_GPIOD_MODER, 2U*BIT, VAL)
#define RESET_GPIOD_MODER_BITS(BIT, VAL) RESET_BITS(REG_GPIOD_MODER, 2U*BIT, 0b11U, VAL)
#define READ_GPIOD_MODER_BITS(BIT) READ_BITS(REG_GPIOD_MODER, 2U*BIT, 0b11U)
#define SET_GPIOD_MODER_INPUT_MODE(BIT) RESET_BITS(REG_GPIOD_MODER, 2U*BIT, 0b11U, GPIOD_MODER_INPUT_MODE)
#define SET_GPIOD_MODER_GPO_MODE(BIT) RESET_BITS(REG_GPIOD_MODER, 2U*BIT, 0b11U, GPIOD_MODER_GPO_MODE)
#define SET_GPIOD_MODER_ALTERNATE_FUNC_MODE(BIT) RESET_BITS(REG_GPIOD_MODER, 2U*BIT, 0b11U, GPIOD_MODER_ALTERNATE_FUNC_MODE)
#define SET_GPIOD_MODER_ANALOG_MODE(BIT) RESET_BITS(REG_GPIOD_MODER, 2U*BIT, 0b11U, GPIOD_MODER_ANALOG_MODE)


#define SET_GPIOE_MODER_BITS(BIT, VAL) SET_BITS(REG_GPIOE_MODER, 2U*BIT, VAL)
#define RESET_GPIOE_MODER_BITS(BIT, VAL) RESET_BITS(REG_GPIOE_MODER, 2U*BIT, 0b11U, VAL)
#define READ_GPIOE_MODER_BITS(BIT) READ_BITS(REG_GPIOE_MODER, 2U*BIT, 0b11U)
#define SET_GPIOE_MODER_INPUT_MODE(BIT) RESET_BITS(REG_GPIOE_MODER, 2U*BIT, 0b11U, GPIOE_MODER_INPUT_MODE)
#define SET_GPIOE_MODER_GPO_MODE(BIT) RESET_BITS(REG_GPIOE_MODER, 2U*BIT, 0b11U, GPIOE_MODER_GPO_MODE)
#define SET_GPIOE_MODER_ALTERNATE_FUNC_MODE(BIT) RESET_BITS(REG_GPIOE_MODER, 2U*BIT, 0b11U, GPIOE_MODER_ALTERNATE_FUNC_MODE)
#define SET_GPIOE_MODER_ANALOG_MODE(BIT) RESET_BITS(REG_GPIOE_MODER, 2U*BIT, 0b11U, GPIOE_MODER_ANALOG_MODE)


#define SET_GPIOF_MODER_BITS(BIT, VAL) SET_BITS(REG_GPIOF_MODER, 2U*BIT, VAL)
#define RESET_GPIOF_MODER_BITS(BIT, VAL) RESET_BITS(REG_GPIOF_MODER, 2U*BIT, 0b11U, VAL)
#define READ_GPIOF_MODER_BITS(BIT) READ_BITS(REG_GPIOF_MODER, 2U*BIT, 0b11U)
#define SET_GPIOF_MODER_INPUT_MODE(BIT) RESET_BITS(REG_GPIOF_MODER, 2U*BIT, 0b11U, GPIOF_MODER_INPUT_MODE)
#define SET_GPIOF_MODER_GPO_MODE(BIT) RESET_BITS(REG_GPIOF_MODER, 2U*BIT, 0b11U, GPIOF_MODER_GPO_MODE)
#define SET_GPIOF_MODER_ALTERNATE_FUNC_MODE(BIT) RESET_BITS(REG_GPIOF_MODER, 2U*BIT, 0b11U, GPIOF_MODER_ALTERNATE_FUNC_MODE)
#define SET_GPIOF_MODER_ANALOG_MODE(BIT) RESET_BITS(REG_GPIOF_MODER, 2U*BIT, 0b11U, GPIOF_MODER_ANALOG_MODE)


#define SET_GPIOA_OTYPER_BIT(BIT) SET_BIT(REG_GPIOA_OTYPER, BIT)
#define CLEAR_GPIOA_OTYPER_BIT(BIT) CLEAR_BIT(REG_GPIOA_OTYPER, BIT)
#define RESET_GPIOA_OTYPER_BIT(BIT, VAL) RESET_BIT(REG_GPIOA_OTYPER, BIT, VAL)
#define READ_GPIOA_OTYPER_BIT(BIT) READ_BIT(REG_GPIOA_OTYPER, BIT)
#define SET_GPIOA_OTYPER_PP(BIT) RESET_BITS(REG_GPIOA_OTYPER, 1U*BIT, 0b1U, GPIOA_OTYPER_PP)
#define SET_GPIOA_OTYPER_OD(BIT) RESET_BITS(REG_GPIOA_OTYPER, 1U*BIT, 0b1U, GPIOA_OTYPER_OD)


#define SET_GPIOB_OTYPER_BIT(BIT) SET_BIT(REG_GPIOB_OTYPER, BIT)
#define CLEAR_GPIOB_OTYPER_BIT(BIT) CLEAR_BIT(REG_GPIOB_OTYPER, BIT)
#define RESET_GPIOB_OTYPER_BIT(BIT, VAL) RESET_BIT(REG_GPIOB_OTYPER, BIT, VAL)
#define READ_GPIOB_OTYPER_BIT(BIT) READ_BIT(REG_GPIOB_OTYPER, BIT)
#define SET_GPIOB_OTYPER_PP(BIT) RESET_BITS(REG_GPIOB_OTYPER, 1U*BIT, 0b1U, GPIOB_OTYPER_PP)
#define SET_GPIOB_OTYPER_OD(BIT) RESET_BITS(REG_GPIOB_OTYPER, 1U*BIT, 0b1U, GPIOB_OTYPER_OD)


#define SET_GPIOC_OTYPER_BIT(BIT) SET_BIT(REG_GPIOC_OTYPER, BIT)
#define CLEAR_GPIOC_OTYPER_BIT(BIT) CLEAR_BIT(REG_GPIOC_OTYPER, BIT)
#define RESET_GPIOC_OTYPER_BIT(BIT, VAL) RESET_BIT(REG_GPIOC_OTYPER, BIT, VAL)
#define READ_GPIOC_OTYPER_BIT(BIT) READ_BIT(REG_GPIOC_OTYPER, BIT)
#define SET_GPIOC_OTYPER_PP(BIT) RESET_BITS(REG_GPIOC_OTYPER, 1U*BIT, 0b1U, GPIOC_OTYPER_PP)
#define SET_GPIOC_OTYPER_OD(BIT) RESET_BITS(REG_GPIOC_OTYPER, 1U*BIT, 0b1U, GPIOC_OTYPER_OD)


#define SET_GPIOD_OTYPER_BIT(BIT) SET_BIT(REG_GPIOD_OTYPER, BIT)
#define CLEAR_GPIOD_OTYPER_BIT(BIT) CLEAR_BIT(REG_GPIOD_OTYPER, BIT)
#define RESET_GPIOD_OTYPER_BIT(BIT, VAL) RESET_BIT(REG_GPIOD_OTYPER, BIT, VAL)
#define READ_GPIOD_OTYPER_BIT(BIT) READ_BIT(REG_GPIOD_OTYPER, BIT)
#define SET_GPIOD_OTYPER_PP(BIT) RESET_BITS(REG_GPIOD_OTYPER, 1U*BIT, 0b1U, GPIOD_OTYPER_PP)
#define SET_GPIOD_OTYPER_OD(BIT) RESET_BITS(REG_GPIOD_OTYPER, 1U*BIT, 0b1U, GPIOD_OTYPER_OD)


#define SET_GPIOE_OTYPER_BIT(BIT) SET_BIT(REG_GPIOE_OTYPER, BIT)
#define CLEAR_GPIOE_OTYPER_BIT(BIT) CLEAR_BIT(REG_GPIOE_OTYPER, BIT)
#define RESET_GPIOE_OTYPER_BIT(BIT, VAL) RESET_BIT(REG_GPIOE_OTYPER, BIT, VAL)
#define READ_GPIOE_OTYPER_BIT(BIT) READ_BIT(REG_GPIOE_OTYPER, BIT)
#define SET_GPIOE_OTYPER_PP(BIT) RESET_BITS(REG_GPIOE_OTYPER, 1U*BIT, 0b1U, GPIOE_OTYPER_PP)
#define SET_GPIOE_OTYPER_OD(BIT) RESET_BITS(REG_GPIOE_OTYPER, 1U*BIT, 0b1U, GPIOE_OTYPER_OD)


#define SET_GPIOF_OTYPER_BIT(BIT) SET_BIT(REG_GPIOF_OTYPER, BIT)
#define CLEAR_GPIOF_OTYPER_BIT(BIT) CLEAR_BIT(REG_GPIOF_OTYPER, BIT)
#define RESET_GPIOF_OTYPER_BIT(BIT, VAL) RESET_BIT(REG_GPIOF_OTYPER, BIT, VAL)
#define READ_GPIOF_OTYPER_BIT(BIT) READ_BIT(REG_GPIOF_OTYPER, BIT)
#define SET_GPIOF_OTYPER_PP(BIT) RESET_BITS(REG_GPIOF_OTYPER, 1U*BIT, 0b1U, GPIOF_OTYPER_PP)
#define SET_GPIOF_OTYPER_OD(BIT) RESET_BITS(REG_GPIOF_OTYPER, 1U*BIT, 0b1U, GPIOF_OTYPER_OD)


#define SET_GPIOA_PUPDR_BITS(BIT, VAL) SET_BITS(REG_GPIOA_PUPDR, 2U*BIT, VAL)
#define RESET_GPIOA_PUPDR_BITS(BIT, VAL) RESET_BITS(REG_GPIOA_PUPDR, 2U*BIT, 0b11U, VAL)
#define READ_GPIOA_PUPDR_BITS(BIT) READ_BITS(REG_GPIOA_PUPDR, 2U*BIT, 0b11U)
#define SET_GPIOA_PUPDR_NO(BIT) RESET_BITS(REG_GPIOA_PUPDR, 2U*BIT, 0b11U, GPIOA_PUPDR_NO)
#define SET_GPIOA_PUPDR_PU(BIT) RESET_BITS(REG_GPIOA_PUPDR, 2U*BIT, 0b11U, GPIOA_PUPDR_PU)
#define SET_GPIOA_PUPDR_PD(BIT) RESET_BITS(REG_GPIOA_PUPDR, 2U*BIT, 0b11U, GPIOA_PUPDR_PD)
#define SET_GPIOA_PUPDR_REVERSE(BIT) RESET_BITS(REG_GPIOA_PUPDR, 2U*BIT, 0b11U, GPIOA_PUPDR_REVERSE)


#define SET_GPIOB_PUPDR_BITS(BIT, VAL) SET_BITS(REG_GPIOB_PUPDR, 2U*BIT, VAL)
#define RESET_GPIOB_PUPDR_BITS(BIT, VAL) RESET_BITS(REG_GPIOB_PUPDR, 2U*BIT, 0b11U, VAL)
#define READ_GPIOB_PUPDR_BITS(BIT) READ_BITS(REG_GPIOB_PUPDR, 2U*BIT, 0b11U)
#define SET_GPIOB_PUPDR_NO(BIT) RESET_BITS(REG_GPIOB_PUPDR, 2U*BIT, 0b11U, GPIOB_PUPDR_NO)
#define SET_GPIOB_PUPDR_PU(BIT) RESET_BITS(REG_GPIOB_PUPDR, 2U*BIT, 0b11U, GPIOB_PUPDR_PU)
#define SET_GPIOB_PUPDR_PD(BIT) RESET_BITS(REG_GPIOB_PUPDR, 2U*BIT, 0b11U, GPIOB_PUPDR_PD)
#define SET_GPIOB_PUPDR_REVERSE(BIT) RESET_BITS(REG_GPIOB_PUPDR, 2U*BIT, 0b11U, GPIOB_PUPDR_REVERSE)


#define SET_GPIOC_PUPDR_BITS(BIT, VAL) SET_BITS(REG_GPIOC_PUPDR, 2U*BIT, VAL)
#define RESET_GPIOC_PUPDR_BITS(BIT, VAL) RESET_BITS(REG_GPIOC_PUPDR, 2U*BIT, 0b11U, VAL)
#define READ_GPIOC_PUPDR_BITS(BIT) READ_BITS(REG_GPIOC_PUPDR, 2U*BIT, 0b11U)
#define SET_GPIOC_PUPDR_NO(BIT) RESET_BITS(REG_GPIOC_PUPDR, 2U*BIT, 0b11U, GPIOC_PUPDR_NO)
#define SET_GPIOC_PUPDR_PU(BIT) RESET_BITS(REG_GPIOC_PUPDR, 2U*BIT, 0b11U, GPIOC_PUPDR_PU)
#define SET_GPIOC_PUPDR_PD(BIT) RESET_BITS(REG_GPIOC_PUPDR, 2U*BIT, 0b11U, GPIOC_PUPDR_PD)
#define SET_GPIOC_PUPDR_REVERSE(BIT) RESET_BITS(REG_GPIOC_PUPDR, 2U*BIT, 0b11U, GPIOC_PUPDR_REVERSE)


#define SET_GPIOD_PUPDR_BITS(BIT, VAL) SET_BITS(REG_GPIOD_PUPDR, 2U*BIT, VAL)
#define RESET_GPIOD_PUPDR_BITS(BIT, VAL) RESET_BITS(REG_GPIOD_PUPDR, 2U*BIT, 0b11U, VAL)
#define READ_GPIOD_PUPDR_BITS(BIT) READ_BITS(REG_GPIOD_PUPDR, 2U*BIT, 0b11U)
#define SET_GPIOD_PUPDR_NO(BIT) RESET_BITS(REG_GPIOD_PUPDR, 2U*BIT, 0b11U, GPIOD_PUPDR_NO)
#define SET_GPIOD_PUPDR_PU(BIT) RESET_BITS(REG_GPIOD_PUPDR, 2U*BIT, 0b11U, GPIOD_PUPDR_PU)
#define SET_GPIOD_PUPDR_PD(BIT) RESET_BITS(REG_GPIOD_PUPDR, 2U*BIT, 0b11U, GPIOD_PUPDR_PD)
#define SET_GPIOD_PUPDR_REVERSE(BIT) RESET_BITS(REG_GPIOD_PUPDR, 2U*BIT, 0b11U, GPIOD_PUPDR_REVERSE)


#define SET_GPIOE_PUPDR_BITS(BIT, VAL) SET_BITS(REG_GPIOE_PUPDR, 2U*BIT, VAL)
#define RESET_GPIOE_PUPDR_BITS(BIT, VAL) RESET_BITS(REG_GPIOE_PUPDR, 2U*BIT, 0b11U, VAL)
#define READ_GPIOE_PUPDR_BITS(BIT) READ_BITS(REG_GPIOE_PUPDR, 2U*BIT, 0b11U)
#define SET_GPIOE_PUPDR_NO(BIT) RESET_BITS(REG_GPIOE_PUPDR, 2U*BIT, 0b11U, GPIOE_PUPDR_NO)
#define SET_GPIOE_PUPDR_PU(BIT) RESET_BITS(REG_GPIOE_PUPDR, 2U*BIT, 0b11U, GPIOE_PUPDR_PU)
#define SET_GPIOE_PUPDR_PD(BIT) RESET_BITS(REG_GPIOE_PUPDR, 2U*BIT, 0b11U, GPIOE_PUPDR_PD)
#define SET_GPIOE_PUPDR_REVERSE(BIT) RESET_BITS(REG_GPIOE_PUPDR, 2U*BIT, 0b11U, GPIOE_PUPDR_REVERSE)


#define SET_GPIOF_PUPDR_BITS(BIT, VAL) SET_BITS(REG_GPIOF_PUPDR, 2U*BIT, VAL)
#define RESET_GPIOF_PUPDR_BITS(BIT, VAL) RESET_BITS(REG_GPIOF_PUPDR, 2U*BIT, 0b11U, VAL)
#define READ_GPIOF_PUPDR_BITS(BIT) READ_BITS(REG_GPIOF_PUPDR, 2U*BIT, 0b11U)
#define SET_GPIOF_PUPDR_NO(BIT) RESET_BITS(REG_GPIOF_PUPDR, 2U*BIT, 0b11U, GPIOF_PUPDR_NO)
#define SET_GPIOF_PUPDR_PU(BIT) RESET_BITS(REG_GPIOF_PUPDR, 2U*BIT, 0b11U, GPIOF_PUPDR_PU)
#define SET_GPIOF_PUPDR_PD(BIT) RESET_BITS(REG_GPIOF_PUPDR, 2U*BIT, 0b11U, GPIOF_PUPDR_PD)
#define SET_GPIOF_PUPDR_REVERSE(BIT) RESET_BITS(REG_GPIOF_PUPDR, 2U*BIT, 0b11U, GPIOF_PUPDR_REVERSE)


#define SET_GPIOA_IDR_BIT(BIT) SET_BIT(REG_GPIOA_IDR, BIT)
#define CLEAR_GPIOA_IDR_BIT(BIT) CLEAR_BIT(REG_GPIOA_IDR, BIT)
#define RESET_GPIOA_IDR_BIT(BIT, VAL) RESET_BIT(REG_GPIOA_IDR, BIT, VAL)
#define READ_GPIOA_IDR_BIT(BIT) READ_BIT(REG_GPIOA_IDR, BIT)


#define SET_GPIOB_IDR_BIT(BIT) SET_BIT(REG_GPIOB_IDR, BIT)
#define CLEAR_GPIOB_IDR_BIT(BIT) CLEAR_BIT(REG_GPIOB_IDR, BIT)
#define RESET_GPIOB_IDR_BIT(BIT, VAL) RESET_BIT(REG_GPIOB_IDR, BIT, VAL)
#define READ_GPIOB_IDR_BIT(BIT) READ_BIT(REG_GPIOB_IDR, BIT)


#define SET_GPIOC_IDR_BIT(BIT) SET_BIT(REG_GPIOC_IDR, BIT)
#define CLEAR_GPIOC_IDR_BIT(BIT) CLEAR_BIT(REG_GPIOC_IDR, BIT)
#define RESET_GPIOC_IDR_BIT(BIT, VAL) RESET_BIT(REG_GPIOC_IDR, BIT, VAL)
#define READ_GPIOC_IDR_BIT(BIT) READ_BIT(REG_GPIOC_IDR, BIT)


#define SET_GPIOD_IDR_BIT(BIT) SET_BIT(REG_GPIOD_IDR, BIT)
#define CLEAR_GPIOD_IDR_BIT(BIT) CLEAR_BIT(REG_GPIOD_IDR, BIT)
#define RESET_GPIOD_IDR_BIT(BIT, VAL) RESET_BIT(REG_GPIOD_IDR, BIT, VAL)
#define READ_GPIOD_IDR_BIT(BIT) READ_BIT(REG_GPIOD_IDR, BIT)


#define SET_GPIOE_IDR_BIT(BIT) SET_BIT(REG_GPIOE_IDR, BIT)
#define CLEAR_GPIOE_IDR_BIT(BIT) CLEAR_BIT(REG_GPIOE_IDR, BIT)
#define RESET_GPIOE_IDR_BIT(BIT, VAL) RESET_BIT(REG_GPIOE_IDR, BIT, VAL)
#define READ_GPIOE_IDR_BIT(BIT) READ_BIT(REG_GPIOE_IDR, BIT)


#define SET_GPIOF_IDR_BIT(BIT) SET_BIT(REG_GPIOF_IDR, BIT)
#define CLEAR_GPIOF_IDR_BIT(BIT) CLEAR_BIT(REG_GPIOF_IDR, BIT)
#define RESET_GPIOF_IDR_BIT(BIT, VAL) RESET_BIT(REG_GPIOF_IDR, BIT, VAL)
#define READ_GPIOF_IDR_BIT(BIT) READ_BIT(REG_GPIOF_IDR, BIT)


#define SET_GPIOA_ODR_BIT(BIT) SET_BIT(REG_GPIOA_ODR, BIT)
#define CLEAR_GPIOA_ODR_BIT(BIT) CLEAR_BIT(REG_GPIOA_ODR, BIT)
#define RESET_GPIOA_ODR_BIT(BIT, VAL) RESET_BIT(REG_GPIOA_ODR, BIT, VAL)
#define READ_GPIOA_ODR_BIT(BIT) READ_BIT(REG_GPIOA_ODR, BIT)


#define SET_GPIOB_ODR_BIT(BIT) SET_BIT(REG_GPIOB_ODR, BIT)
#define CLEAR_GPIOB_ODR_BIT(BIT) CLEAR_BIT(REG_GPIOB_ODR, BIT)
#define RESET_GPIOB_ODR_BIT(BIT, VAL) RESET_BIT(REG_GPIOB_ODR, BIT, VAL)
#define READ_GPIOB_ODR_BIT(BIT) READ_BIT(REG_GPIOB_ODR, BIT)


#define SET_GPIOC_ODR_BIT(BIT) SET_BIT(REG_GPIOC_ODR, BIT)
#define CLEAR_GPIOC_ODR_BIT(BIT) CLEAR_BIT(REG_GPIOC_ODR, BIT)
#define RESET_GPIOC_ODR_BIT(BIT, VAL) RESET_BIT(REG_GPIOC_ODR, BIT, VAL)
#define READ_GPIOC_ODR_BIT(BIT) READ_BIT(REG_GPIOC_ODR, BIT)


#define SET_GPIOD_ODR_BIT(BIT) SET_BIT(REG_GPIOD_ODR, BIT)
#define CLEAR_GPIOD_ODR_BIT(BIT) CLEAR_BIT(REG_GPIOD_ODR, BIT)
#define RESET_GPIOD_ODR_BIT(BIT, VAL) RESET_BIT(REG_GPIOD_ODR, BIT, VAL)
#define READ_GPIOD_ODR_BIT(BIT) READ_BIT(REG_GPIOD_ODR, BIT)


#define SET_GPIOE_ODR_BIT(BIT) SET_BIT(REG_GPIOE_ODR, BIT)
#define CLEAR_GPIOE_ODR_BIT(BIT) CLEAR_BIT(REG_GPIOE_ODR, BIT)
#define RESET_GPIOE_ODR_BIT(BIT, VAL) RESET_BIT(REG_GPIOE_ODR, BIT, VAL)
#define READ_GPIOE_ODR_BIT(BIT) READ_BIT(REG_GPIOE_ODR, BIT)


#define SET_GPIOF_ODR_BIT(BIT) SET_BIT(REG_GPIOF_ODR, BIT)
#define CLEAR_GPIOF_ODR_BIT(BIT) CLEAR_BIT(REG_GPIOF_ODR, BIT)
#define RESET_GPIOF_ODR_BIT(BIT, VAL) RESET_BIT(REG_GPIOF_ODR, BIT, VAL)
#define READ_GPIOF_ODR_BIT(BIT) READ_BIT(REG_GPIOF_ODR, BIT)


